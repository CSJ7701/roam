:PROPERTIES:
:ID:       015f6619-1bfd-42ea-8ed9-8a49950e6bca
:END:
#+title: Kaggle: Intro to Game AI and Reinforcement Learning



* Intro

For this exercise, we will be using one of Kaggles libraries, so that we don't have to implement the basics from scratch.

We will be creating an agent to play connect 4, and kaggle has two models for this.

#+begin_src python :results none

  from kaggle_environments import make, evaluate

  # Create the game environment
  # Set debug=True to see the errors if your agent refuses to run
  env = make("connectx", debug=True)

  # List of available default agents
  print(list(env.agents))

#+end_src

This code lists kaggle's two connect 4 agents - "random" and "negamax".

The random agent will select uniformly from a list of valid moves. In terms of connect 4, a valid move is any move where the column isn't already full.
There are seven spaces in a column, so if a column has less than seven pieces in it, the model can place a piece in that column.

We can simulate a game with the following code, which will make two random agents play against each other.

#+begin_src python :results none

  env.run(["random", "random"])

  end.render(mode="ipython")

#+end_src

The above code is an example where we run 2 "random" agents to play against each other.
The =env.render= line is a piece of code from kaggle to render a gui board so we can watch the game.

This example uses premade models, but how can we make our own?

We can create agents as python functions that take two arguments, =obs= and =config=.
In terms of connect 4, we want these functions to return an integer 0-6 to represent the index of the column in which we place our piece.

Some examples are below:
#+begin_src python :results none

  # Selects a random column
  def agent_random(obs, config):
      valid_moves = [col for col in range(config.columns) if obs.board[col] == 0]
      return random.choice(valid_moves)

  # Selects middle column
  def agent_middle(obs, config):
      return config.columns//2

  # Selects leftmost valid column
  def agent_leftmost(obs, config):
      valid_moves = [col for col in range(config.columns) if obs.board[col] == 0]
      return valid_moves[0]

#+end_src

What are =obs= and =config=?

Obs contains 2 attributes:
- obs.board
- obs.mark

obs.board is a python list that represents every space on the board. The value is a 0 is the space is unoccupied, and either a 1 or 2 (which "team" the piece belongs to).
The list is organized in rows, meaning that if the first row of the connect 4 board is empty, the first 7 entries in the list will be 0.
obs.mark is either a 1 or a 2, and represents the team that the agent belongs to.

Config contains 3 pieces of information:
- config.columns, or the number of columns in the board (for connect 4, 7)
- config.rows, or the number of rows in the board (for connect 4, 6)
- config.inarow, or the number of pieces that the agent must place in a row in order to win.


If we want to compare how well agents perform compared to each other, we must run them against each other multiple times, alternating which will go first.
We use another python function to get the win percentages from these trials and average them.

#+begin_src python :results none


  def get_win_percentages(agent1, agent2, n_rounds=100):
      # Use default Connect Four setup
      config = {'rows': 6, 'columns': 7, 'inarow': 4}
      # Agent 1 goes first (roughly) half the time          
      outcomes = evaluate("connectx", [agent1, agent2], config, [], n_rounds//2)
      # Agent 2 goes first (roughly) half the time      
      outcomes += [[b,a] for [a,b] in evaluate("connectx", [agent2, agent1], config, [], n_rounds-n_rounds//2)]
      print("Agent 1 Win Percentage:", np.round(outcomes.count([1,-1])/len(outcomes), 2))
      print("Agent 2 Win Percentage:", np.round(outcomes.count([-1,1])/len(outcomes), 2))
      print("Number of Invalid Plays by Agent 1:", outcomes.count([None, 0]))
      print("Number of Invalid Plays by Agent 2:", outcomes.count([0, None]))

  
#+end_src

* Code Exercise

In this exercise, we are going to improve our agents performance.

Rather than attempting to come up with a complicated strategy, we can instruct our model to choose a winning move, if it is available.

Our goal is to create an agent that:
- selects a winning move, if available (if there are multiple it picks one)
- If there is no winning move, makes a random move.

#+begin_src python :results verbatim :session Kaggle-Reinf

  import numpy as np

  # Gets board at next step, if the agent drops piece in the selected column.
  def drop_piece(gric, col, piece, config):
      next_grid=grid.copy()
      for row in range(config.rows-1, -1, -1):
          if next_grid[row][col]==0:
              break
      next_grid[row][col]=piece
      return next_grid

  # Returns true if dropping piece in the selected column results in a game win
  def check_winning_move(obs, config, col, piece):
      # Convert the board to a 2D grid
      grid=np.asarray(obs.board).reshape(config.rows, config.columns)
      next_grid=drop_piece(grid, col, piece, config)
      # Horizontal
      for row in range(config.rows):
          for col in range(config.columns-(config.inarow-1)):
              window=list(next_grid[row,col:col+config.inarow])
              if window.count(piece)==config.inarow:
                  return True
      # Vertical
      for row in range(config.rows-(config.inarow-1)):
          for col in range(config.columns):
              window=list(next_grid[row:row+config.inarow,col])
              if window.count(piece)==config.inarow:
                  return True
      # Positive Diagonal
      for row in range(config.rows-(config.inarow-1)):
          for col in range(config.columns-(config.inarow-1)):
              window=list(next_grid[range(row, row+config.inarow), range(col, col+config.inarow)])
              if window.count(piece)==config.inarow:
                  return True
      # Negative Diagonal
      for row in range(config.inarow-1, config.rows):
          for col in range(config.columns-(config.inarow-1)):
              window=list(next_grid[range(row, row-config.inarow, -1), range(col, col+config.inarow)])
              if window.count(piece)==config.inarow:
                  return True
      return False

#+end_src

#+RESULTS:


The =check_winning_move= function takes 4 arguments. =obs= and =config= are defined in the previous section, =col= represents any valid move, and piece is either the agents mark or that of the agent's opponent.

The function returns true if dropping the piece in the provided column wins the game (for either the agent or its opponent), and otherwise returns false.
To check if the agent can win in the next move, you canset =piece=obs.mark=

Now, we need to define a new agent to utilize the functions we have written.

#+begin_src python :results verbatim :session Kaggle-Reinf

  import random

  def agent_q1(obs, config):
      valid_moves=[col for col in range(config.columns) if obs.board[col]==0]

      for move in valid_moves:
          if check_winning_move(obs, config, move, obs.mark):
              return move

      return random.choice(valid_moves)


#+end_src

#+RESULTS:

We now have an agent that can select winning moves.
How can we improve this further?

We can make the agent block the opponents potential winning moves, if it cannot win in the next move.

This means that the agent will:
- Select a winning move, if it is available.
- Select a move to block the opponent from winning, if it cannot win
- If neither option is possible, make a random move.

  We can do this by extending the logic from the previous example:

  #+begin_src python :results verbatim :session Kaggle-Reinf

    def agent_q2(obs, config):
        valid_moves=[col for col in range(config.columns) if obs.board[col]==0]

        # Select winning moves
        for move in valid_moves:
            if check_winning_move(obs, config, move, obs.mark):
                return move

        # Block opponents move
        if obs.mark == 1:
            opp_mark=2
        elif obs.mark ==2:
            opp_mark=1

        for move in valid_moves:
            if check_winning_move(obs, config, move, opp_mark):
                return move

        return random.choice(valid_moves)

  #+end_src

  #+RESULTS:

* One Step Lookahead

Someone who has played a game before typically develops strategies that they use when they next play the game.

We can use *heuristics* to share our strategies for connect four with our agent.

As a human player, we usually view a game like connect four as a series of possible moves. For each possible move, we predict what our opponent might do in response, and how that may affect the outcome of the game.
This idea is known as a "game tree" - a diagram which represents every single possible move starting with an empty board.

A complete game of connect 4 has over 4 trillion different board configurations, so in practice our agent will work with only a small subset of these possibilities.
To ensure that this incomplete tree is useful to our agent, we use a *heuristic* or *heuristic function*.
This function assigns a score to the different game boards, estimating that boards with higher scores will result in a more likely victory for the agent.

One example of a possible heuristic could look at each group of four adjacent coordinates in a horizontal, diagonal, or vertical line. It could assign 1000000 points if the agent has four disks in a row (the agent won), 1 point if the agent filled 3 spots and the remaining spot was empty, and -100 points if the opponent filled 3 spots and the last was empty.

How exactly would our agent use this heuristic function?
Consider it's the agents turn, and it is trying to plan a move for a specific game board. There are 7 possible moves - one for each column. We record the resulting board for each move.
We can then use the heuristic function to assign a score to each board. The board with the highest score defines the move that the agent will make.

What does this code look like?

#+begin_src python :results none

  import numpy as np
  import random

  def score_move(grid, col, mark, config):
      next_grid=drop_piece(grid, col, mark, config)
      score=get_heuristic(next_grid, mark, config)
      return score

  def drop_piece(grid, col, mark, config):
      next_grid=grid.copy()
      for row in range(config.rows-1,-1,-1):
          if next_grid[row][col]==0:
              break
      next_grid[row][col]=mark
      return next_grid

  # Helper function for score_move: calculates value of heuristic for grid
  def get_heuristic(grid, mark, config):
      num_threes = count_windows(grid, 3, mark, config)
      num_fours = count_windows(grid, 4, mark, config)
      num_threes_opp = count_windows(grid, 3, mark%2+1, config)
      score = num_threes - 1e2*num_threes_opp + 1e6*num_fours
      return score

  # Helper function for get_heuristic: checks if window satisfies heuristic conditions
  def check_window(window, num_discs, piece, config):
      return (window.count(piece) == num_discs and window.count(0) == config.inarow-num_discs)

  # Helper function for get_heuristic: counts number of windows satisfying specified heuristic conditions
  def count_windows(grid, num_discs, piece, config):
      num_windows = 0
      # horizontal
      for row in range(config.rows):
          for col in range(config.columns-(config.inarow-1)):
              window = list(grid[row, col:col+config.inarow])
              if check_window(window, num_discs, piece, config):
                  num_windows += 1
                  # vertical
          for row in range(config.rows-(config.inarow-1)):
              for col in range(config.columns):
                  window = list(grid[row:row+config.inarow, col])
                  if check_window(window, num_discs, piece, config):
                  num_windows += 1
      # positive diagonal
      for row in range(config.rows-(config.inarow-1)):
          for col in range(config.columns-(config.inarow-1)):
              window = list(grid[range(row, row+config.inarow), range(col, col+config.inarow)])
              if check_window(window, num_discs, piece, config):
                  num_windows += 1
          # negative diagonal
          for row in range(config.inarow-1, config.rows):
              for col in range(config.columns-(config.inarow-1)):
                  window = list(grid[range(row, row-config.inarow, -1), range(col, col+config.inarow)])
                  if check_window(window, num_discs, piece, config):
                      num_windows += 1
      return num_windows

  # The actual Agent

  def agent(obs, config):
    # Get list of valid moves
    valid_moves = [c for c in range(config.columns) if obs.board[c] == 0]
    # Convert the board to a 2D grid
    grid = np.asarray(obs.board).reshape(config.rows, config.columns)
    # Use the heuristic to assign a score to each possible board in the next turn
    scores = dict(zip(valid_moves, [score_move(grid, col, obs.mark, config) for col in valid_moves]))
    # Get a list of columns (moves) that maximize the heuristic
    max_cols = [key for key in scores.keys() if scores[key] == max(scores.values())]
    # Select at random from the maximizing columns
    return random.choice(max_cols)
#+end_src
* Code Exercise
In the previous section, we defined a heuristic that would examine each set of 4 adjacent spots, counting occupied spaces in each set.

We will expand this heuristic to divide sets of 4 into 4 occupied spaces, 3 occupied spaces (agent), 2 occupied spaces (agent), 2 occupied spaces (opponent), and 3 occupied spaces (opponent).
We will also choose the point values to apply to each situation.

#+begin_src python :results none

  A=1000000
  B=100
  C=1
  D=-1
  E=-100

  def get_heuristic_q1(grid, col, mark, config):
  num_twos=count_windows(grid,2,mark,config)
  num_threes=count_windows(grid,3,mark,config)
  num_fours=count_windows(grid,4,mark,config)
  num_twos_opp=count_windows(grid,2,mark%2+1,config)
  num_threes_opp=count_windows(grid,3,mark%2+1,config)
  score=A*num_fours + B*num_threes + C*num_twos + D*num_twos_opp + E*num_threes_opp
  return score

#+end_src

#+RESULTS:

With A=100000, B=100, C=1, D=-1, and E=-100; the agent's win percentage (in 50 games) is 0.58, and the opponents is 0.48.

Increasing D to -100 and E to -10000 increases the agent's win pecentage to 0.74.
Further adjusting our parameters so that A=10000000000, B=100, C=1, D=-10, and E=-1000 improves our win percentage to 0.86.

This would indicate that increasing the point loss when opponents make good moves is an important aspect, but that increasing the score achieved on an agent win is the most influential factor.
/Note/ that all of these changes are relative to the other multipliers - if all numbers are 1000 and A is 10000, this will not be effective, since A is small compared to the other numbers.




