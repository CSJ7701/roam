:PROPERTIES:
:ID:       b9336eee-1c1e-4ea3-89a7-d038c9078054
:END:
#+title: Emacs Startpage
#+category: Emacs Startpage
#+filetags:                                                                                                           :Emacs:Project:
* Inbox
** DONE test
CLOSED: [2023-12-23 Sat 12:37]
:LOGBOOK:
- State "DONE"       from "TODO"       [2023-12-23 Sat 12:37]
:END:

* Thoughts

- Look at using org-protocol. You can use the link syntax to assign javascript to html buttons, then write lisp functions to parse the desired commands. It also looks like you could use =org-protocol-protocol-alist= to assign a function directly to a protocol name. This might be easier.
- You could also look at configuring nyxt - you can write some sort of interaction between the two, and setup nyxt to render a special webpage of some sort - maybe one written in lisp?

- The lisp isnt working. Nothing's actually communicating over the websocket. I've managed to create the websocker, the html server, and establish some listeners in JS, but something's going wrong - either the listeners aren't listening for the right things, or the events aren't properly configured. 


* Content

** HTML

#+begin_src html :tangle ~/projects/Emacs_Startpage/index.html
  <!DOCTYPE html>
  <html lang="en">
    <head>
      <meta charset="UTF-8">
      <meta name="viewport" content="width=device-width, initial-scale=1.0">
      <link rel="stylesheet" href="styles.css">
      <title>Personal Dashboard</title>
    </head>
    <body>
      <header>
        <div class="logo">
          <img src="icon.png" alt="Personal Icon" style="max-width: 500px;">
        </div>
      </header>
      <ul>
        <li><a href="">1</a></li>
        <li><a href="">2</a></li>
        <li><a href="">3</a></li>
        <li><a href="">4</a></li>
      </ul>
      <main>
        <div class="dashboard-and-agenda">
          <div class="dashboard">
            <div class="dashboard-card">
              <h2>Welcome, User!</h2>
              <p>Your personalized dashboard content goes here.</p>
            </div>
          </div>
          <div class="agenda-card">
            <h2>Agenda</h2>
            <div class="agenda-content">
              <div id="agenda-container">
              <!-- Agenda items will appear here -->
              </div>
            </div>
          </div>
        </div>
      </main>
      <footer class="message-card">
        <div class="messages">
          <!-- Websocket messages will appear here -->
        </div>
      </footer>
      <script src="websocket.js"></script>
      <script src="agenda.js"></script>

    </body>
  </html>
#+end_src

#+begin_src css :tangle ~/projects/Emacs_Startpage/styles.css
      /* Additional styles for the message card */
      body {
          font-family: Arial, sans-serif;
          margin: 0;
          padding: 0;
          background-color: #f9f9f9;
      }

      header {
          padding: 1rem;
          text-align: center;
          background-color: #333;
      }

      .logo img {
          max-width: 100%;
      }

      main {
          display: flex;
          flex-direction: column;
          justify-content: space-between;
          align-items: center;
          padding: 2rem;
      }
      /* Toolbar */
      ul {
          list-style-type: none;
          margin: 0;
          padding: 0;
          overflow: hidden;
          background-color: #333;
      }

      li {
          float: left;
      }

      li a {
          display: block;
          color: white;
          text-align: center;
          padding: 14px 16px;
          background-color: #dddddd;
      }

      li a:hover {
          background-color: #111;
      }

      /* Dashboard and Agenda */

      .dashboard-and-agenda {
    display: flex;
    justify-content: space-between; /* Distribute items evenly along the main axis */
    align-items: flex-start;
    width: 100%;
    max-width: 1200px; /* Adjust the maximum width as needed */
    margin-top: 2rem;
  }

    .dashboard {
      display: flex;
      justify-content: space-between;
      align-items: flex-start;
      margin-top: 0rem;
    }

    .dashboard-card {
      background-color: #4CAF50;
      color: #fff;
      border-radius: 15px;
      box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.1);
      padding: 2rem;
      min-width: 600px; /* Adjusted width */
      flex-grow: 1; /* Take up available space */
    }

      .dashboard-card h2, .message-card h2 {
          font-size: 2rem;
          margin-bottom: 1rem;
      }

      .agenda-card {
          background-color: #fff;
          color: #333;
          border-radius: 15px;
          box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.1);
          padding: 2rem;
          min-width: 400px;
          max-width: 800px;
          margin-top: 0;
      }

      .agenda-card h2 {
          font-size: 2rem;
          margin-bottom: 1rem;
      }

      .agenda-content {
          /* Styling for agenda content goes here */
      }


      .message-card {
          background-color: #f5f5f5; /* Light gray background */
      color: #333; /* Dark gray text color */
      box-shadow: 0px 2px 4px rgba(0, 0, 0, 0.1); /* Subtle shadow */
      padding: 1.5rem; /* Slightly less padding */
      border-top: 2px solid #ddd; /* Light gray top border */
      margin-top: 2rem; /* Add some margin from the main content */
    }

    .messages {
      max-height: 150px; /* Reduce max height */
      overflow-y: auto;
      padding: 1rem;
      background-color: #fff;
      border-radius: 5px; /* Smaller border radius */
      box-shadow: 0px 1px 3px rgba(0, 0, 0, 0.1);
      font-size: 14px; /* Smaller font size */
    }

    .messages p {
      margin: 0.3rem 0;
      padding: 0.5rem 1rem;
      border-radius: 3px; /* Smaller border radius */
      background-color: #f0f0f0;
    }



      /* Additional styles for responsiveness */
      @media (max-width: 768px) {
          main {
              flex-direction: column;
          }

          .dashboard-card, .message-card {
              margin: 1rem 0;
          }

          .message-card {
              padding: 1rem;
          }
      }

#+end_src

** Lisp

#+begin_src emacs-lisp :tangle ~/projects/Emacs_Startpage/functions.el
      (require 'websocket)
      (require 'simple-httpd)

      (defvar cj/websocket/clients nil
        "List of connected clients.")

      (defun cj/websocket/send-message (websocket message)
        "Send a MESSAGE to a specific WEBSOCKET."
        (websocket-send-text websocket message))

      (defun cj/websocket/broadcast-message (message)
        "Broadcast a MESSAGE to all connected clients."
        (dolist (client cj/websocket/clients)
          (cj/websocket/send-message client message)))

      (defun log-message (message)
        "Log a MESSAGE and send it to connected clients."
        (message message)
        (cj/websocket/broadcast-message message))

      (defvar cj/web/http-server-process nil
        "Process of the local HTTP server.")

      (defvar cj/web/websocket-server nil
        "WebSocket server object.")

      (defun cj/web/start-local-servers ()
        "Start local web and WebSocket servers."
        (interactive)
        (require 'simple-httpd)
        (require 'websocket)

        ;; Start HTTP server
        (setq httpd-root "~/projects/Emacs_Startpage/")
        (setq cj/web/http-server-process (httpd-start))

        ;; Start WebSocket server
        (setq websocket-debug t)
        (setq cj/web/websocket-server
              (websocket-server
               8081
               :on-open (lambda (websocket)
                          (push websocket cj/websocket/clients)
                          (message "WebSocket connection opened."))
               :on-close (lambda (websocket)
                           (setq cj/websocket/clients (remove websocket cj/websocket/clients))
                           (message "WebSocket connection closed.")))))

      (defun cj/web/stop-local-servers ()
        "Stop local web and WebSocket servers."
        (interactive)
        (when cj/web/http-server-process
          (httpd-stop cj/web/http-server-process))
        (when cj/web/websocket-server
          (websocket-server-close cj/web/websocket-server)))


#+end_src

** Javascript

#+begin_src txt :tangle ~/projects/Emacs_Startpage/websocket.js

const messagesDiv = document.querySelector('.messages');
const messagesButton = document.querySelector('li.popup-button a');

// Create a WebSocket connection
const socket = new WebSocket('ws://localhost:8081');

// Event handler for when the connection is opened
socket.addEventListener('open', event => {
  messagesDiv.innerHTML += '<p>WebSocket connection opened. (js)</p>';
});

// Event handler for incoming messages
socket.addEventListener('message', event => {
  const message = event.data;
  // Create a new paragraph element
  const messageElement = document.createElement('p');
  messageElement.textContent = message;
  // Append the new element to the messagesDiv
  messagesDiv.appendChild(messageElement);
});

// Event handler for when the connection is closed
socket.addEventListener('close', event => {
  messagesDiv.innerHTML += '<p>WebSocket connection closed.</p>';
});

// Event listener for clicking the "Messages" button
messagesButton.addEventListener('click', () => {
  // Clear existing messages
  messagesDiv.innerHTML = '';
  
  // Request the WebSocket server to start sending messages
  socket.send('start-messages');
});
#+end_src

#+begin_src txt :tangle ~/projects/Emacs_Startpage/agenda.js

const agendaContainer = document.getElementById('agenda-container');
const websocket = new WebSocket('ws://localhost:8081'); // Replace with your WebSocket URL

websocket.addEventListener('message', (event) => {
  const agendaItem = event.data;

  // Create a new <div> element for each agenda item
  const agendaItemDiv = document.createElement('div');
  agendaItemDiv.textContent = agendaItem;

  // Append the <div> element to the agenda container
  agendaContainer.appendChild(agendaItemDiv);
});


#+end_src

